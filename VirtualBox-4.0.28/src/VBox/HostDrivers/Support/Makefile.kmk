# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the support library and the drivers/modules/kexts it uses.
#

#
# Copyright (C) 2006-2010 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#
# The contents of this file may alternatively be used under the terms
# of the Common Development and Distribution License Version 1.0
# (CDDL) only, as it comes in the "COPYING.CDDL" file of the
# VirtualBox OSE distribution, in which case the provisions of the
# CDDL are applicable instead of those of the GPL.
#
# You may elect to license modified versions of this file under the
# terms and conditions of either the GPL or the CDDL or both.
#

SUB_DEPTH = ../../../..
include	$(KBUILD_PATH)/subheader.kmk

#
# Targets
#
LIBRARIES += SUPR3 SUPR3Static
ifdef VBOX_WITH_HARDENING
 LIBRARIES += SUPR3HardenedStatic
endif
DLLS.win += VBoxSupLib
ifndef VBOX_ONLY_DOCS
 if1of ($(VBOX_LDR_FMT), pe lx)
  LIBRARIES += SUPR0
 endif
endif
if  !defined(VBOX_ONLY_DOCS) \
 && !defined(VBOX_ONLY_EXTPACKS) \
 && !defined(VBOX_ONLY_TESTSUITE)
 ifdef VBOX_WITH_SUPSVC
  PROGRAMS += VBoxSupSvc
 endif
 ifdef VBOX_WITH_VBOXDRV
  LIBRARIES       += SUPR0IdcClient
  SYSMODS.freebsd += vboxdrv
  SYSMODS.linux   += vboxdrv
  SYSMODS.win     += VBoxDrv
  SYSMODS.os2     += VBoxDrv
  SYSMODS.solaris += vboxdrv
 endif
 INSTALLS.linux   += vboxdrv-mod vboxdrv-sh vboxdrv-dkms
 INSTALLS.freebsd += vboxdrv-mod vboxdrv-sh

 #
 # Include sub-makefile(s).
 #
 include $(PATH_SUB_CURRENT)/testcase/Makefile.kmk

 #
 # Populate FILES_VBOXDRV_NOBIN and FILES_VBOXDRV_BIN
 #
 ifeq ($(KBUILD_TARGET),linux)
  include $(PATH_SUB_CURRENT)/linux/files_vboxdrv
 endif
 ifeq ($(KBUILD_TARGET),freebsd)
  include $(PATH_SUB_CURRENT)/freebsd/files_vboxdrv
 endif
endif # !VBOX_ONLY_DOCS && !VBOX_ONLY_EXTPACKS && !VBOX_ONLY_TESTSUITE

#
# Authenticode related trust anchors and certificates -> .cpp
#
VBOX_SUP_WIN_CERTS_FILE = $(SUPR3_0_OUTDIR)/TrustAnchorsAndCerts.cpp
VBOX_SUP_WIN_CERTS := \
       SpcRootMicrosoft0=SpcRoot-MicrosoftAuthenticodeTmRootAuthority-01.taf \
       SpcRootMicrosoft1=SpcRoot-MicrosoftRootAuthority-00c1008b3c3c8811d13ef663ecdf40.taf \
       SpcRootMicrosoft2=SpcRoot-MicrosoftRootCertificateAuthority-79ad16a14aa0a5ad4c7358f407132e65.taf \
       SpcRootMicrosoft3=SpcRoot-MicrosoftRootCertificateAuthority2010-28cc3a25bfba44ac449a9b586b4339aa.taf \
       SpcRootMicrosoft4=SpcRoot-MicrosoftRootCertificateAuthority2011-3f8bc8b5fc9fb29643b569d66c42e144.taf \
       SpcRootMicrosoft5=SpcRoot-MicrosoftDigitalMediaAuthority2005-6eff330eb6e7569740680870104baaba.taf \
       NtRootMicrosoft6=NtRoot-MicrosoftCodeVerificationRoot-729404101f3e0ca347837fca175a8438.taf \
       TimeRootMicrosoft0=Timestamp-CopyrightC1997MicrosoftCorp-01.taf \
       TrustedCertVBox0=Trusted-OracleCorporationVirtualBox-51ca009816fdbd80f120e015ee75823e.taf
VBOX_SUP_WIN_CERT_NAMES := $(foreach cert,$(VBOX_SUP_WIN_CERTS),$(firstword $(subst =,$(SPACE) ,$(cert))))
VBOX_PATH_SUPR3_CERTIFICATES := $(PATH_SUB_CURRENT)/win/Certificates

# 1=name, 2=filter, 3=buildcert?.
if "$(KBUILD_TARGET)" == "win" && defined(VBOX_WITH_HARDENING)
 VBOX_SUP_GEN_CERT_MACRO = 'SUPTAENTRY const g_aSUP$(1)TAs[] =' '{' \
       $(if-expr "$(3)" == "",,'    SUPTAENTRY_GEN(g_abSUPBuildCert),') \
	$(foreach certnm,$(filter $(2),$(VBOX_SUP_WIN_CERT_NAMES)), '    SUPTAENTRY_GEN(g_abSUP$(certnm)),') \
	'};' 'unsigned const g_cSUP$(1)TAs = RT_ELEMENTS(g_aSUP$(1)TAs);' '' ''
else
 VBOX_SUP_GEN_CERT_MACRO = 'SUPTAENTRY const g_aSUP$(1)TAs[] =' '{' \
	$(foreach certnm,$(filter $(2),$(VBOX_SUP_WIN_CERT_NAMES)), '    SUPTAENTRY_GEN(g_abSUP$(certnm)),') \
	'};' 'unsigned const g_cSUP$(1)TAs = RT_ELEMENTS(g_aSUP$(1)TAs);' '' ''
endif

$$(VBOX_SUP_WIN_CERTS_FILE): $(MAKEFILE_CURRENT) \
		$(foreach cert,$(VBOX_SUP_WIN_CERTS),$(VBOX_PATH_SUPR3_CERTIFICATES)/$(lastword $(subst =,$(SPACE) ,$(cert)))) \
		$(VBOX_BIN2C) \
		$(if-expr  "$(KBUILD_TARGET)" == "win" && defined(VBOX_WITH_HARDENING),$(VBOX_RTSIGNTOOL),) \
		| $$(dir $$@)
	$(QUIET)$(RM) -f -- $@ $@.cer
	$(QUIET)$(APPEND) -n "$@" \
       	'' \
       	'#include <VBox/sup.h>' \
               ''
	$(foreach cert,$(VBOX_SUP_WIN_CERTS), $(NLTAB)$(VBOX_BIN2C) -ascii --append \
		"SUP$(firstword $(subst =,$(SP) ,$(cert)))" \
		"$(VBOX_PATH_SUPR3_CERTIFICATES)/$(lastword $(subst =,$(SP) ,$(cert)))" \
		"$@")
# The build certificate.
if "$(KBUILD_TARGET)" == "win" && defined(VBOX_WITH_HARDENING)
	$(VBOX_RTSIGNTOOL) extract-exe-signer-cert --exe $(VBOX_RTSIGNTOOL) --output "$@.cer" --der
	$(VBOX_BIN2C) -ascii --append SUPBuildCert "$@.cer" $@
	$(QUIET)$(RM) -f -- $@.cer
endif
# Generate certificate lists.
	$(QUIET)$(APPEND) -n "$@" '' \
               $(call VBOX_SUP_GEN_CERT_MACRO,All,%,build) \
               $(call VBOX_SUP_GEN_CERT_MACRO,SpcRoot,SpcRoot%) \
               $(call VBOX_SUP_GEN_CERT_MACRO,NtKernelRoot,NtRoot%) \
               $(call VBOX_SUP_GEN_CERT_MACRO,Timestamp,TimeRoot%) \
               $(call VBOX_SUP_GEN_CERT_MACRO,Trusted,TrustedCert%,build)

tst: $(VBOX_SUP_WIN_CERTS_FILE)


#
# The Ring-3 Support Library (this is linked into the IPRT dll, VBoxRT).
#
SUPR3_TEMPLATE      = VBOXR3
SUPR3_DEFS          = \
	IN_SUP_R3 IN_RT_R3 \
        $(if $(VBOX_WITH_SUPSVC),VBOX_WITH_SUPSVC) \
        $(if $(VBOX_WITH_MAIN),VBOX_WITH_MAIN,) \
	VBOX_PERMIT_MORE \
	VBOX_PERMIT_EVEN_MORE
ifdef VBOX_WITH_HARDENING
 SUPR3_SDKS.win     = VBoxPsdk200702
endif
SUPR3_INCS         := $(PATH_SUB_CURRENT)
SUPR3_INCS.l4       = $(L4_INCDIR)
SUPR3_SOURCES       = \
	SUPLib.cpp \
	SUPLibSem.cpp \
	SUPR3HardenedIPRT.cpp \
	SUPR3HardenedVerify.cpp \
	$(KBUILD_TARGET)/SUPLib-$(KBUILD_TARGET).cpp \
 	$(VBOX_SUP_WIN_CERTS_FILE)
ifdef VBOX_WITH_HARDENING
 SUPR3_SOURCES.win  = \
 	win/SUPHardenedVerifyImage-win.cpp
endif

#
# Static version of SUPR3.  This is more of a stub than anything else in a
# hardened build, at least on windows.
#
SUPR3Static_TEMPLATE = VBOXR3STATIC
SUPR3Static_EXTENDS = SUPR3
SUPR3Static_DEFS = $(SUPR3_DEFS) IN_SUP_R3_STATIC
SUPR3Static_SOURCES.win = $(filter-out win/SUPHardenedVerifyImage-win.cpp, $(SUPR3_SOURCES.win))


#
# The static part of the hardened support library (ring-3).
#
VBOX_PATH_RUNTIME_SRC ?= $(PATH_ROOT)/src/VBox/Runtime
SUPR3HardenedStatic_TEMPLATE = VBOXR3HARDENEDLIB
SUPR3HardenedStatic_DEFS     = IN_SUP_HARDENED_R3
SUPR3HardenedStatic_DEFS    += \
	$(if $(VBOX_WITH_SUPSVC),VBOX_WITH_SUPSVC,) \
	$(if $(VBOX_WITH_MAIN),VBOX_WITH_MAIN,) \
	$(if $(VBOX_WITH_RAW_MODE),VBOX_WITH_RAW_MODE,) \
	$(if $(VBOX_WITHOUT_DEBUGGER_CHECKS),VBOX_WITHOUT_DEBUGGER_CHECKS,) \
	$(if $(VBOX_PERMIT_VISUAL_STUDIO_PROFILING),VBOX_PERMIT_VISUAL_STUDIO_PROFILING,) \
	VBOX_PERMIT_MORE \
	VBOX_PERMIT_EVEN_MORE
ifdef VBOX_WITH_VISTA_NO_SP
 SUPR3HardenedStatic_DEFS.win += VBOX_WITH_VISTA_NO_SP
endif
SUPR3HardenedStatic_INCS     = .
SUPR3HardenedStatic_SOURCES  = \
	SUPR3HardenedMain.cpp \
	SUPR3HardenedVerify.cpp \
	SUPR3HardenedNoCrt.cpp \
	$(KBUILD_TARGET)/SUPLib-$(KBUILD_TARGET).cpp
SUPR3HardenedStatic_SOURCES.win = \
	win/SUPR3HardenedMain-win.cpp \
	win/SUPR3HardenedMainA-win.asm \
	win/SUPR3HardenedMainImports-win.cpp \
       win/SUPHardenedVerifyProcess-win.cpp \
       win/SUPHardenedVerifyImage-win.cpp \
	$(VBOX_SUP_WIN_CERTS_FILE)

if "$(KBUILD_TARGET)" == "win" && defined(VBOX_WITH_HARDENING) ## @todo some of this move up.
 SUPR3HardenedStatic_DEFS += \
  	IN_RT \
 	IN_RT_R3 \
 	IN_RT_STATIC \
 	IN_DIS \
 	DIS_CORE_ONLY \
  	IPRT_NO_CRT \
 	RT_WITH_NOCRT_ALIASES \
 	LOG_DISABLED \
 	IPRT_NO_ERROR_DATA
 SUPR3HardenedStatic_DEFS.win += LDR_ONLY_PE __STRALIGN_H_

 SUPR3HardenedStatic_INCS += $(PATH_ROOT)/include/iprt/nocrt  $(VBOX_PATH_RUNTIME_SRC)/include

 SUPR3HardenedStatic_SOURCES += \
	$(VBOX_PATH_RUNTIME_SRC)/common/ldr/ldr.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/ldr/ldrEx.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/ldr/ldrPE.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/alloc/heapsimple.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-basics.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-cursor.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-default-allocator.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-dump.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-encode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-bitstring.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-bitstring-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-boolean.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-boolean-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-core-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-dyntype.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-dyntype-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-integer.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-integer-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-null.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-null-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-objid.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-objid-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-octetstring.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-octetstring-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-string.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-string-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-time.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/asn1/asn1-ut-time-decode.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/digest-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/digest-builtin.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-asn1-decoder.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-init.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-sanity.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkcs7-verify.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkix-signature-builtin.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkix-signature-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkix-signature-rsa.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkix-verify.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/pkix-util.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/rsa-asn1-decoder.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/rsa-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/rsa-init.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/rsa-sanity.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/spc-asn1-decoder.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/spc-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/spc-init.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/spc-sanity.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/x509-asn1-decoder.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/x509-certpaths.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/x509-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/x509-init.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/x509-sanity.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/x509-verify.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/store.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/store-inmem.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/taf-asn1-decoder.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/taf-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/taf-init.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/taf-sanity.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/tsp-asn1-decoder.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/tsp-core.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/tsp-init.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/crypto/tsp-sanity.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/alt-md2.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/alt-md5.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha1.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha256.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/alt-sha512.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/md2str.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/md5str.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/sha1str.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/sha256str.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/checksum/sha512str.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/err/errinfo.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/path/RTPathChangeToUnixSlashes.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/path/RTPathExt.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTStrPrintHexBytes.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTUtf16PrintHexBytes.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTUtf16ICmpAscii.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTUtf16CatAscii.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTUtf16CopyAscii.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTUtf16End.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strstrip.cpp \
       \
	$(VBOX_PATH_RUNTIME_SRC)/common/err/errmsg.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/math/bignum.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/math/bignum-amd64-x86.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg1Weak.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2Weak.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/misc/RTAssertMsg2WeakV.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/misc/zero.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/path/RTPathFilename.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/memchr.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/memcmp.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/memcpy.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/memmove.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/mempcpy.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/memset.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTStrCat.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTStrCmp.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTStrCopy.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTStrNCmp.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTStrNLen.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/RTUtf16NLenEx.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strchr.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strcmp.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strcpy.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strformat.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strformatrt.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strformattype.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/stringalloc.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strlen.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strncmp.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strncpy.asm \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strprintf.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strstr.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/strtonum.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/utf-16.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/utf-8.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/utf-8-case.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/unidata-upper.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/string/unidata-lower.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/common/time/time.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/generic/RTAssertShouldPanic-generic.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/generic/RTPathAbs-generic.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/generic/RTPathGetCurrentDrive-generic.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/generic/RTPathGetCurrentOnDrive-generic.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/generic/memsafer-generic.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/generic/uuid-generic.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/r3/win/utf8-win.cpp \
       \
	../../Disassembler/DisasmCore.cpp \
	../../Disassembler/DisasmTables.cpp \
	../../Disassembler/DisasmTablesX64.cpp \
	../../Disassembler/DisasmReg.cpp

 SUPR3HardenedStatic_SOURCES.amd64 += \
 	$(VBOX_PATH_RUNTIME_SRC)/common/math/RTUInt128MulByU64.asm

 SUPR3HardenedStatic_SOURCES.win += \
 	win/SUPR3HardenedNoCrt-win.cpp \
 	$(VBOX_PATH_RUNTIME_SRC)/nt/RTErrConvertFromNtStatus.cpp \
 	$(VBOX_PATH_RUNTIME_SRC)/r3/nt/pathint-nt.cpp \
 	$(VBOX_PATH_RUNTIME_SRC)/win/RTErrConvertFromWin32.cpp \
	$(VBOX_PATH_RUNTIME_SRC)/win/errmsgwin.cpp

 # Add necessary compiler specific files from libcmt.lib and the lib dir.
 ifeq ($(KBUILD_TARGET),win)
   SUPR3HardenedStatic_VBOX_LIBC_OBJS = chkstk.obj
   ifeq ($(KBUILD_TARGET_ARCH),x86)
    SUPR3HardenedStatic_VBOX_LIBC_OBJS += \
    	ulldiv.obj \
    	ulldvrm.obj \
    	ullrem.obj \
    	ullshr.obj \
    	lldiv.obj \
    	lldvrm.obj \
    	llmul.obj \
    	llrem.obj \
    	llshl.obj \
    	llshr.obj \
    	rotl.obj \
    	rotr.obj
    ifndef VBOX_USE_VCC70
     SUPR3HardenedStatic_VBOX_LIBC_OBJS += alloca16.obj
    endif
   endif
  SUPR3HardenedStatic_SOURCES.win += $(addprefix $(SUPR3HardenedStatic_0_OUTDIR)/,$(SUPR3HardenedStatic_VBOX_LIBC_OBJS))

  $(addprefix $$(SUPR3HardenedStatic_0_OUTDIR)/,$(SUPR3HardenedStatic_VBOX_LIBC_OBJS)): \
		$$(PATH_TOOL_$(TEMPLATE_VBOXR3EXE_TOOL.win.$(KBUILD_TARGET_ARCH))_LIB)/libcmt.lib | $$(dir $$@)
	$(TOOL_$(TEMPLATE_VBOXR3HARDENEDEXE_TOOL.win.$(KBUILD_TARGET_ARCH))_AR) "$<" \
		/EXTRACT:`$(TOOL_$(TEMPLATE_VBOXR3HARDENEDEXE_TOOL.win.$(KBUILD_TARGET_ARCH))_AR) "$<" /LIST \
		          | $(SED_EXT) -n -e '/[\\/:]$(notdir $@)/p'` \
		"/OUT:$@"
 endif
endif

SUPR3HardenedMain.cpp_DEFS = VBOX_SVN_REV=$(VBOX_SVN_REV)


#
# VBoxSupLib - Windows DLL for catching thread creation and termination.
#
VBoxSupLib_TEMPLATE = $(if-expr "$(KBUILD_TARGET)" == "win" && defined(VBOX_WITH_HARDENING),VBOXR3HARDENEDLIB,VBOXR3)
VBoxSupLib_SDKS.win = VBOX_NTDLL
VBoxSupLib_LDFLAGS.win.amd64 = -Entry:DllMainEntrypoint
VBoxSupLib_LDFLAGS.win.x86   = -Entry:DllMainEntrypoint
VBoxSupLib_DEFS = \
	$(if $(VBOX_WITHOUT_DEBUGGER_CHECKS),VBOX_WITHOUT_DEBUGGER_CHECKS,)
VBoxSupLib_SOURCES = \
	$(KBUILD_TARGET)/VBoxSupLib-$(KBUILD_TARGET).cpp
VBoxSupLib_LIBS.win.x86 = \
 	$(PATH_TOOL_$(TEMPLATE_VBOXR3STATIC_TOOL.win.x86)_LIB)/libcmt$(VBOX_VCC_CRT_TYPE).lib   # for __chkstk
VBoxSupLib_LIBS.win.amd64 = \
 	$(PATH_TOOL_$(TEMPLATE_VBOXR3STATIC_TOOL.win.amd64)_LIB)/libcmt$(VBOX_VCC_CRT_TYPE).lib # for __chkstk


#
# VBoxSupSvc - The system wide service/daemon.
#
VBoxSupSvc_TEMPLATE = VBOXR3EXE
VBoxSupSvc_SOURCES = \
	SUPSvc.cpp \
	SUPSvcGlobal.cpp \
	$(KBUILD_TARGET)/SUPSvc-$(KBUILD_TARGET).cpp
if1of ($(KBUILD_TARGET), win)
 VBoxSupSvc_SOURCES += \
	SUPSvcGrant.cpp
endif
ifn1of ($(KBUILD_TARGET), win)
 VBoxSupSvc_SOURCES += \
 	SUPSvcMain-posix.cpp
endif
VBoxSupSvc_LIBS = \
	$(LIB_RUNTIME)


#
# SUPR0 - The Ring-0 Import / Thunk library.
#
SUPR0_TEMPLATE      = VBoxR0
ifeq ($(VBOX_LDR_FMT),pe)
 SUPR0_SOURCES     += SUPR0.def
endif
ifeq ($(VBOX_LDR_FMT),lx)
SUPR0_SOURCES      += $$(SUPR0_0_OUTDIR)/SUPR0.def
$$(SUPR0_0_OUTDIR)/SUPR0.def: $(PATH_SUB_CURRENT)/SUPR0.def | $$(dir $$@)
	$(SED) \
		-e 's/^[ \t][ \t]*\([gA-Z]\)/    _\1/' \
		-e 's/[ \t]DATA[ \t]*/ /' \
		-e 's/g_pSUPGlobalInfoPage/g_SUPGlobalInfoPage/' \
		--output $@.tmp\
		$<
	$(MV) -f $@.tmp $@
endif


#
# SUPR0IdcClient - The Ring-0 IDC client driver library.
#
SUPR0IdcClient_TEMPLATE = VBOXR0DRV
SUPR0IdcClient_DEFS = IN_RT_R0 IN_SUP_R0 IN_SUP_STATIC
SUPR0IdcClient_SDKS.win = W2K3DDK WINPSDKINCS
SUPR0IdcClient_SOURCES.$(KBUILD_TARGET) = \
	$(KBUILD_TARGET)/SUPR0IdcClient-$(KBUILD_TARGET).c
SUPR0IdcClient_SOURCES = \
	SUPR0IdcClient.c \
	SUPR0IdcClientComponent.c \
	SUPR0IdcClientStubs.c


if  !defined(VBOX_ONLY_DOCS) \
 && !defined(VBOX_ONLY_EXTPACKS) \
 && !defined(VBOX_ONLY_TESTSUITE)

#
# VBoxDrv.sys - The Windows driver.
#
## @todo consolidate all the targets into a single mess.
ifeq ($(KBUILD_TARGET),win)
VBoxDrv_TEMPLATE      = VBOXR0DRV
ifdef VBOX_SIGNING_MODE
 VBoxDrv_NOINST       = true
endif
VBoxDrv_DEFS          = IN_RT_R0 IN_SUP_R0 SUPDRV_WITH_RELEASE_LOGGER
ifdef VBOX_WITHOUT_NATIVE_R0_LOADER
 VBoxDrv_DEFS        += VBOX_WITHOUT_NATIVE_R0_LOADER
endif
ifdef VBOX_WITH_VMMR0_DISABLE_PREEMPTION
VBoxDrv_DEFS         += VBOX_WITH_VMMR0_DISABLE_PREEMPTION
endif
ifdef VBOX_WITHOUT_DEBUGGER_CHECKS
 VBoxDrv_DEFS        += VBOX_WITHOUT_DEBUGGER_CHECKS
endif
ifdef VBOX_PERMIT_VISUAL_STUDIO_PROFILING
 VBoxDrv_DEFS        += VBOX_PERMIT_VISUAL_STUDIO_PROFILING
endif
ifdef VBOX_WITH_VISTA_NO_SP
 VBoxDrv_DEFS        += VBOX_WITH_VISTA_NO_SP
endif
ifdef VBOX_WITH_HARDENING
 VBoxDrv_ASDEFS      += VBOX_WITH_HARDENING
endif
VBoxDrv_DEFS         += VBOX_PERMIT_MORE

VBoxDrv_SDKS          = WINDDK W2K3DDK WINPSDKINCS
VBoxDrv_INCS         := $(PATH_SUB_CURRENT)
VBoxDrv_SOURCES       = \
	win/SUPDrv-win.cpp \
	win/SUPDrvA-win.asm \
	SUPDrv.c \
	SUPDrvSem.c \
	win/VBoxDrv.rc
ifdef VBOX_WITH_HARDENING
 VBoxDrv_SOURCES.win    += \
 	win/SUPHardenedVerifyImage-win.cpp \
 	win/SUPHardenedVerifyProcess-win.cpp \
 	$(VBOX_SUP_WIN_CERTS_FILE)
endif
VBoxDrv_LDFLAGS.x86   = -Entry:DriverEntry@8
VBoxDrv_LDFLAGS.amd64 = -Entry:DriverEntry
VBoxDrv_LIBS          = \
	$(PATH_STAGE_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB) \
	$(PATH_SDK_W2K3DDK_LIB)/ntoskrnl.lib \
	$(PATH_SDK_W2K3DDK_LIB)/hal.lib


INSTALLS += VBoxDrv-inf
VBoxDrv-inf_INST = $(INST_BIN)
VBoxDrv-inf_MODE = a+r,u+w
VBoxDrv-inf_SOURCES = \
	$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.inf
VBoxDrv-inf_CLEAN = $(VBoxDrv-inf_SOURCES)
VBoxDrv-inf_BLDDIRS = $(PATH_TARGET)/VBoxDrvCat.dir

$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.inf: $(PATH_SUB_CURRENT)/win/VBoxDrv.inf $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_GENERATE,VBoxDrv-inf,$@,$<)
	$(call VBOX_EDIT_INF_FN,$<,$@)

 ifdef VBOX_SIGNING_MODE
VBoxDrv-inf_SOURCES += \
	$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.sys \
	$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.cat

$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.sys: $$(TARGET_VBoxDrv) | $$(dir $$@)
	$(INSTALL) -m 644 $< $(@D)

$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.cat: \
		$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.inf \
		$(PATH_TARGET)/VBoxDrvCat.dir/VBoxDrv.sys
	$(call MSG_TOOL,Inf2Cat,VBoxDrv-inf,$@,$<)
	$(call VBOX_MAKE_CAT_FN, $(@D),$@)
 endif # signing
endif # win


#
# vboxdrv.ko - The Linux Kernel Module (syntax check only).
#
ifeq ($(KBUILD_TARGET),linux)
vboxdrv_TEMPLATE      = VBOXR0DRV
vboxdrv_NOINST        = true
vboxdrv_DEFS          = KBUILD_MODNAME=KBUILD_STR\(vboxdrv\) KBUILD_BASENAME=KBUILD_STR\(vboxdrv\) MODULE IN_RT_R0 IN_SUP_R0 CONFIG_VBOXDRV_AS_MISC
ifdef VBOX_LINUX_VERSION_2_4
vboxdrv_DEFS         += EXPORT_SYMTAB
endif
vboxdrv_INCS         := \
	$(PATH_SUB_CURRENT) \
	$(PATH_ROOT)/src/VBox/Runtime/r0drv/linux
vboxdrv_LIBS          = $(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
vboxdrv_LIBS.debug    = $(vboxdrv_LIBS) $(VBOX_GCC_LIBGCC)
vboxdrv_SOURCES       = \
	$(KBUILD_TARGET)/SUPDrv-$(KBUILD_TARGET).c \
	SUPDrv.c \
	SUPDrvSem.c
ifndef VBOX_LINUX_VERSION_2_4
vboxdrv_SOURCES      += \
	$(KBUILD_TARGET)/SUPDrv-$(KBUILD_TARGET).mod.c
endif


#
# Targets for installing the linux sources.
#
vboxdrv-mod_INST    = bin/src/vboxdrv/
vboxdrv-mod_MODE    = a+r,u+w
vboxdrv-mod_SOURCES = $(subst ",,$(FILES_VBOXDRV_NOBIN)) #"
vboxdrv-mod_SOURCES += \
	$(vboxdrv-mod_0_OUTDIR)/Makefile
vboxdrv-mod_CLEAN   = \
	$(vboxdrv-mod_0_OUTDIR)/Makefile

vboxdrv-sh_INST     = bin/src/vboxdrv
vboxdrv-sh_MODE     = a+rx,u+w
vboxdrv-sh_SOURCES  = $(subst ",,$(FILES_VBOXDRV_BIN)) #"
vboxdrv-sh_SOURCES += \
	$(vboxdrv-sh_0_OUTDIR)/build_in_tmp \
	$(PATH_ROOT)/src/VBox/HostDrivers/linux/do_Module.symvers
vboxdrv-sh_CLEAN    = \
	$(PATH_TARGET)/vboxdrv-sh-1.dep \
	$(vboxdrv-sh_0_OUTDIR)/build_in_tmp

# Scripts needed for building the kernel modules

$$(vboxdrv-sh_0_OUTDIR)/build_in_tmp: \
		$(PATH_ROOT)/src/VBox/HostDrivers/linux/build_in_tmp \
		$(VBOX_VERSION_STAMP) \
		| $$(dir $$@)
	$(call MSG_TOOL,Creating,,$@)
	$(QUIET)$(SED) \
		-e "s;_VERSION_;${VBOX_VERSION_STRING};g" \
		-e "s;_MODULE_;vboxdrv;g" \
		-e "s;_BUILDTYPE_;${KBUILD_TYPE};g" --output $@ $<
	$(QUIET)chmod 0755 $@

includedep $(PATH_TARGET)/vboxdrv-sh-1.dep
$$(vboxdrv-mod_0_OUTDIR)/Makefile: \
		$(PATH_SUB_CURRENT)/linux/Makefile \
		$$(if $$(eq $$(Support/linux/Makefile_VBOX_HARDENED),$$(VBOX_WITH_HARDENING)),,FORCE) \
		| $$(dir $$@)
	$(call MSG_TOOL,Creating,,$@)
 ifndef VBOX_WITH_HARDENING
	$(QUIET)$(SED) -e "s;-DVBOX_WITH_HARDENING;;g" --output $@ $<
 else
	$(QUIET)$(CP) -f $< $@
 endif
	%$(QUIET2)$(RM) -f -- $(PATH_TARGET)/vboxdrv-sh-1.dep
	%$(QUIET2)$(APPEND) '$(PATH_TARGET)/vboxdrv-sh-1.dep' 'Support/linux/Makefile_VBOX_HARDENED=$(VBOX_WITH_HARDENING)'

endif # real linux



#
# VBoxDrv.kext - The Darwin Kernel Extension.
#
ifeq ($(KBUILD_TARGET),darwin)
# Leopard (x86) and Snow Leopard (x86/amd64)
SYSMODS += VBoxDrv
VBoxDrv_TEMPLATE    = VBOXR0DRV
VBoxDrv_INST        = $(INST_VBOXDRV)Contents/MacOS/
VBoxDrv_DEFS       := VBOX_WITH_HOST_VMX IN_RT_R0 IN_SUP_R0 SUPDRV_WITH_RELEASE_LOGGER VBOX_SVN_REV=$(VBOX_SVN_REV)
VBoxDrv_DEFS.debug  = DEBUG_DARWIN_GIP
VBoxDrv_INCS        = . $(VBoxDrv_0_OUTDIR)
VBoxDrv_LIBS        = $(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
#VBoxDrv_LDFLAGS     = -v -Wl,-whyload -Wl,-v -Wl,-whatsloaded
VBoxDrv_SOURCES     = \
	SUPDrv.c \
	SUPDrvSem.c \
	$(KBUILD_TARGET)/SUPDrv-$(KBUILD_TARGET).cpp

ifdef VBOX_WITH_DTRACE_R0DRV
 VBoxDrv_DEFS += VBOX_WITH_DTRACE
 VBoxDrv_INTERMEDIATES += $(VBoxDrv_0_OUTDIR)/SUPDrv-dtrace.h
 VBoxDrv_CLEAN         += $(VBoxDrv_0_OUTDIR)/SUPDrv-dtrace.h $(VBoxDrv_0_OUTDIR)/SUPDrv-dtrace.tmp
 $$(VBoxDrv_0_OUTDIR)/SUPDrv-dtrace.h: $(PATH_SUB_CURRENT)/SUPDrv-dtrace.d | $$(dir $$@)
	dtrace -C -h -o $@.tmp -s $<
	$(SED) -e '/<unistd\.h>/d' $@.tmp --output $@
	$(RM) -f $@.tmp
endif

INSTALLS += VBoxDrv.kext
VBoxDrv.kext_INST     = $(INST_VBOXDRV)Contents/
VBoxDrv.kext_SOURCES  =	$(VBoxDrv.kext_0_OUTDIR)/Info.plist
VBoxDrv.kext_CLEAN    =	$(VBoxDrv.kext_0_OUTDIR)/Info.plist

$$(VBoxDrv.kext_0_OUTDIR)/Info.plist: \
		$(PATH_SUB_CURRENT)/darwin/Info.plist \
		$(VBOX_VERSION_MK) | $$(dir $$@)
	$(call MSG_GENERATE,VBoxDrv,$@,$<)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(SED) \
		-e 's/@VBOX_VERSION_STRING@/$(VBOX_VERSION_STRING)/g' \
		-e 's/@VBOX_VERSION_MAJOR@/$(VBOX_VERSION_MAJOR)/g' \
		-e 's/@VBOX_VERSION_MINOR@/$(VBOX_VERSION_MINOR)/g' \
		-e 's/@VBOX_VERSION_BUILD@/$(VBOX_VERSION_BUILD)/g' \
		-e 's/@VBOX_VENDOR@/$(VBOX_VENDOR)/g' \
		-e 's/@VBOX_PRODUCT@/$(VBOX_PRODUCT)/g' \
		-e 's/@VBOX_C_YEAR@/$(VBOX_C_YEAR)/g' \
		--output $@ \
		$<

# Common manual loader script.
INSTALLS += Scripts
Scripts_INST     = $(INST_DIST)
Scripts_SOURCES  = \
	darwin/load.sh

endif # darwin
ifeq ($(KBUILD_TARGET),os2)

#
# VBoxDrv.sys - The OS/2 driver.
#
VBoxDrv_TEMPLATE      = VBOXR0DRV
VBoxDrv_DEFS          = IN_RT_R0 IN_SUP_R0
VBoxDrv_INCS         := $(PATH_SUB_CURRENT)
#VBoxDrv_LDFLAGS       = -s -t -v
VBoxDrv_SOURCES       = \
	os2/SUPDrvA-os2.asm \
	os2/SUPDrv-os2.def
VBoxDrv_LIBS          = \
	$(TARGET_VBoxDrvLib) \
	$(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB) \
	$(VBOX_GCC_LIBGCC) \
	end

# temp hack to ensure that SUPDrvA-os2.asm is first in the link.
LIBRARIES += VBoxDrvLib
VBoxDrvLib_TEMPLATE   = VBOXR0DRV
VBoxDrvLib_NOINST     = 1
VBoxDrvLib_DEFS       = IN_RT_R0 IN_SUP_R0
VBoxDrvLib_INCS      := \
	. \
	$(PATH_ROOT)/src/VBox/Runtime/include
VBoxDrvLib_SOURCES    = \
	os2/SUPDrv-os2.cpp \
	SUPDrv.c \
	SUPDrvSem.c

endif # os2
ifeq ($(KBUILD_TARGET),freebsd)

#
# vboxdrv.ko - The FreeBSD Kernel Module.
#
vboxdrv_TEMPLATE      = VBOXR0DRV
vboxdrv_DEFS          = IN_RT_R0 IN_SUP_R0 SUPDRV_WITH_RELEASE_LOGGER VBOX_SVN_REV=$(VBOX_SVN_REV)
vboxdrv_INCS         := $(PATH_SUB_CURRENT)
vboxdrv_LIBS          = $(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
vboxdrv_SOURCES      := \
	$(KBUILD_TARGET)/SUPDrv-$(KBUILD_TARGET).c \
	$(PATH_SUB_CURRENT)/$(KBUILD_TARGET)/SUPDrv-$(KBUILD_TARGET).def \
	SUPDrv.c \
	SUPDrvSem.c
## @todo the SUPDrv-freebsd.def is most probably gonna break it and require build system hacking...

#
# Targets for installing the freebsd sources.
#
vboxdrv-mod_INST    = bin/src/vboxdrv/
vboxdrv-mod_MODE    = a+r,u+w
vboxdrv-mod_SOURCES = $(subst ",,$(FILES_VBOXDRV_NOBIN)) #"
vboxdrv-mod_SOURCES += \
	$(vboxdrv-mod_0_OUTDIR)/Makefile
vboxdrv-mod_CLEAN   = \
	$(vboxdrv-mod_0_OUTDIR)/Makefile

$$(vboxdrv-mod_0_OUTDIR)/Makefile: \
		$(PATH_SUB_CURRENT)/freebsd/Makefile \
		$$(if $$(eq $$(Support/freebsd/Makefile_VBOX_HARDENED),$$(VBOX_WITH_HARDENING)),,FORCE) \
		| $$(dir $$@)
	$(call MSG_TOOL,Creating,,$@)
 ifndef VBOX_WITH_HARDENING
	$(QUIET)$(SED) -e "s;-DVBOX_WITH_HARDENING;;g" --output $@ $<
 else
	$(QUIET)$(CP) -f $< $@
 endif

endif # freebsd
ifeq ($(KBUILD_TARGET),solaris)

#
# vboxdrv.o - The Solaris Kernel Module.
#
vboxdrv_TEMPLATE      = VBOXR0DRV
vboxdrv_DEFS          = IN_RT_R0 IN_SUP_R0 SUPDRV_WITH_RELEASE_LOGGER
ifdef VBOX_WITH_NETFLT
 vboxdrv_DEFS        += VBOX_WITH_NETFLT
endif
vboxdrv_DEFS         += VBOX_SVN_REV=$(VBOX_SVN_REV)
vboxdrv_DEPS         += $(VBOX_SVN_REV_KMK)
vboxdrv_INCS         := $(PATH_SUB_CURRENT)
vboxdrv_LIBS          = $(PATH_LIB)/RuntimeR0Drv$(VBOX_SUFF_LIB)
vboxdrv_SOURCES       = \
	$(KBUILD_TARGET)/SUPDrv-$(KBUILD_TARGET).c \
	SUPDrv.c \
	SUPDrvSem.c
vboxdrv_LDFLAGS      += -N misc/ctf

endif # solaris

#
# SUPDrv.c needs the VBOX_SVN_REV.
#
SUPDrv.c_DEFS += VBOX_SVN_REV=$(VBOX_SVN_REV)


endif # !VBOX_ONLY_DOCS && !VBOX_ONLY_EXTPACKS && !VBOX_ONLY_TESTSUITE
include $(KBUILD_PATH)/subfooter.kmk

